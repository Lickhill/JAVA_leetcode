/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {

    //     ListNode temp1=list1;
    //     ListNode temp2=list2;
    //     ListNode list3=new ListNode(-1);
    //     ListNode temp3=list3;

    //     while(temp1!=null && temp2!=null)
    //     {
    //         if(temp1.val<temp2.val)
    //         {
    //             ListNode a=new ListNode(temp1.val);
    //             temp3.next=a;
    //             temp3=a;
    //             temp1=temp1.next;
    //         }
    //         else
    //         {
    //            ListNode a=new ListNode(temp2.val);
    //            temp3.next= a;
    //            temp3=a;
    //            temp2=temp2.next;
    //         }  
    //     }

    //     while(temp1!=null)
    //     {
    //         ListNode a=new ListNode(temp1.val);
    //         temp3.next=a;
    //         temp3=a;
    //         temp1=temp1.next;
    //     }
    //     while(temp2!=null)
    //     {
    //         ListNode a=new ListNode(temp2.val);
    //         temp3.next=a;
    //         temp3=a;
    //         temp2=temp2.next;
    //     }
    //   return list3.next;   

        ListNode temp1=list1;
        ListNode temp2=list2;
        ListNode list=new ListNode(-1);
        ListNode tail=list;

        if(list1==null)
        {
            return list2;
        }
        if(list2==null)
        {
            return list1;
        }

        
        while(temp1!=null && temp2!=null)
        {
            if(temp1.val<temp2.val)
            {
                tail.next=temp1;
                tail=temp1;
                temp1=temp1.next;
            }
            else
            {
                tail.next=temp2;
                tail=temp2;
                temp2=temp2.next;
            }
            if(temp1==null)
            {
                tail.next=temp2;
                temp2=temp2.next;
            }
            else if(temp2==null)
            {
                tail.next=temp1;
                temp1=temp1.next;
            }
        }
        return list.next;
    }
}
