/*
// Definition for a Node.
class Node {
    public int val;
    public Node prev;
    public Node next;
    public Node child;
};
*/

class Solution {
    public Node flatten(Node head) {//method 1 (someone please explian the dry run)

        Node temp=head;
        while(temp!=null)
        {
            Node t=temp.next;
            if(temp.child!=null)
            {
                Node c=flatten(temp.child);//what this does is this flattens the list 
                temp.next=c;
                c.prev=temp;

                while(c.next!=null)//moving till the last ele of first half of flattened list. 
                {
                    c=c.next;
                }

                c.next=t;
                if(t!=null)
                {
                    t.prev=c;
                }  
            }
            temp.child=null;
            temp=t; //this is basically temp=temp.next isme aage badate ja raha hai temp jab tak lsat ele of lst branch tak na pahuch jae      
        }
        return head;//returning the entire list after eveything is done and flattened




        //method 2 (why is this wrong?)
        
        // Node temp=head;
        // while(temp!=null)
        // {
        //     if(temp.child!=null)
        //     {
        //         Node c=flatten(temp.child);
        //         temp.next=c;
        //         c.prev=temp;
        //         temp.child=null;  
        //     }
        //     temp=temp.next;
        //     if(temp==null || temp.next==null)
        //     return temp;
        // }
        // return temp;
    }
}
